<?php
/**
 * Implementation of hook_init().
 */
function passwordless_init() {
  if (variable_get('passwordless_show_help', 1) && request_uri() == '/user/login') {
    drupal_add_css(drupal_get_path('module', 'passwordless') .'/passwordless.css');
  }
}

/**
 * Implements hook_permission().
 */
function passwordless_permission() {
  return array(
    'configure passwordless settings' => array(
      'title' => t('Configure Passwordless settings'),
      'description' => t('Configure Passwordless settings'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function passwordless_menu() {
  if (variable_get('passwordless_show_help', 1) ) {
    $items['help/passwordless'] = array(
      'title' => 'What? No password?',
      'page callback' => 'passwordless_help_page',
      'access callback' => 'user_access',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    );
  }

  $items['admin/config/system/passwordless'] = array(
    'title' => 'Passwordless settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('passwordless_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('refresh scheduling information'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function passwordless_menu_alter(&$items) {
  $items['user']['title'] = $items['user/login']['title'];
  // Redirect user/password to user
  $items['user/password']['page callback'] = 'drupal_goto';
  $items['user/password']['page arguments'] = array('user');
  unset($items['user/password']['file'], $items['user/password']['type']);

  $items['user/reset/%/%/%']['page arguments'] = array('passwordless_reset', 2, 3, 4);
  unset($items['user/reset/%/%/%']['file']);
}

function passwordless_settings() {
  $form['passwordless_show_help'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Passwordless help'),
    '#description' => t('Enable help page and provide link to it from the login form. To make sure the help page appears or disappears as desired, clear the menu cache.'),
    '#default_value' => variable_get('passwordless_show_help', 1)
  );
  
  $form['passwordless_help_link_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Passwordless help link text'),
    '#description' => t('Text to display in the login form. For multilingual sites, enter it in English.'),
    '#default_value' => variable_get('passwordless_help_link_text', 'What? No password?'),
  );
  
  return system_settings_form($form);
}

function passwordless_help_page() {
  return t('<p>This website provides passwordless login, an advanced login system that allows people to register and sign on securely with no need to remember a new passwordâ€”or, worse, to use an insecure one.</p>

<p>Your account is kept safe by Drupal&#8217;s security mechanisms, and the only password you need to remember is the one to your e-mail account. Every time you need to log in, just enter your e-mail address in the form, then click &#8220;Log in.&#8221; Within seconds, you&#8217;ll receive a link that will allow you to log in directly. This link is single-use (meaning that no one else can use it after you), and expires in twenty-four hours.</p>

<p>If you use this website from your own computer, chances are you won&#8217;t need to receive this link more than once, unless you log out manually or clear your browser&#8217;s cookies. If you log in through a shared computer, always remember to log out when you&#8217;re finished. The next time you need to log in, just request a new link.</p>');
}

function passwordless_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_login' :
    case 'user_login_block' :
      $form = drupal_get_form('passwordless_login');
    break;

    case 'user_admin_settings' :
      $form['email_password_reset']['#title'] = t('Login-link request');
      $form['email_password_reset']['#description'] = t('Edit the e-mail messages sent to users who request a login link.');
    break;
    
    case 'user_register_form' :
      // Hides the password field, and populates it with a random password
      $form['account']['pass']['#type'] = 'hidden';
      $form['account']['pass']['#default_value'] = md5(user_password());
      array_unshift($form['#validate'], 'passwordless_register_validate');
    break;
    
    case 'user_profile_form' :
      $validate_unset = array_search('user_validate_current_pass', $form['#validate']);
      unset($form['#validate'][$validate_unset], $form['account']['pass'], $form['account']['current_pass']);
    break;
  }
}

// Copied and adapted from user_pass.
// Removed code pertaining to logged-in users, as it's superfluous
function passwordless_login() {
  global $user;

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('E-mail address'),
    '#size' => 60,
    '#maxlength' => max(USERNAME_MAX_LENGTH, EMAIL_MAX_LENGTH),
    '#required' => TRUE,
  );
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Log in'),
  );
  
  if (variable_get('passwordless_show_help', 1)) {
    $form['passwordless_help'] = array(
      '#type' => 'markup',
      '#markup' => l(t(variable_get('passwordless_help_link_text', 'What? No password?')), 'help/passwordless', array('attributes' => array('id' => 'passwordless-help-link'))),
      '#weight' => 1000
    );
  }

  return $form;
}

// Copied and adapted from user_pass_validate
// Removed load-by-name code
function passwordless_login_validate($form, &$form_state) {
  $name = trim($form_state['values']['name']);
  // Try to load by email.
  $users = user_load_multiple(array(), array('mail' => $name, 'status' => '1'));
  $account = reset($users);
  if (isset($account->uid)) {
    form_set_value(array('#parents' => array('account')), $account, $form_state);
  }
  else {
    form_set_error('name', t('Sorry, %name is not recognized as a valid e-mail address on this website.', array('%name' => $name)));
  }
}

// Copied and adapted from user_pass_submit
function passwordless_login_submit($form, &$form_state) {
  global $language;

  $account = $form_state['values']['account'];
  // Mail one time login URL and instructions using current language.
  $mail = _user_mail_notify('password_reset', $account, $language);
  if (!empty($mail)) {
    watchdog('user', 'Login link mailed to %name at %email.', array('%name' => $account->name, '%email' => $account->mail));
    drupal_set_message(t('The login link has been sent to your e-mail address.'));
  }

  $form_state['redirect'] = 'user';
  return;
}

// Copied and adapted from user_pass_reset
function passwordless_reset($form, &$form_state, $uid, $timestamp, $hashed_pass, $action = NULL) {
  global $user;

  // When processing the one-time login link, we have to make sure that a user
  // isn't already logged in.
  if ($user->uid) {
    // The existing user is already logged in.
    if ($user->uid == $uid) {
      drupal_set_message(t('You are logged in as %user. <a href="!user_edit">Change your password.</a>', array('%user' => $user->name, '!user_edit' => url("user/$user->uid/edit"))));
    }
    // A different user is already logged in on the computer.
    else {
      $reset_link_account = user_load($uid);
      if (!empty($reset_link_account)) {
        drupal_set_message(t('Another user (%other_user) is already logged into the site on this computer, but you tried to use a one-time link for user %resetting_user. Please <a href="!logout">logout</a> and try using the link again.',
          array('%other_user' => $user->name, '%resetting_user' => $reset_link_account->name, '!logout' => url('user/logout'))));
      }
      else {
        // Invalid one-time link specifies an unknown user.
        drupal_set_message(t('The one-time login link you clicked is invalid.'));
      }
    }
    drupal_goto();
  }
  else {
    // Time out, in seconds, until login URL expires. Defaults to 24 hours =
    // 86400 seconds.
    $timeout = variable_get('user_password_reset_timeout', 86400);
    $current = REQUEST_TIME;
    // Some redundant checks for extra security ?
    $users = user_load_multiple(array($uid), array('status' => '1'));
    if ($timestamp <= $current && $account = reset($users)) {
      // No time out for first time login.
      if ($account->login && $current - $timestamp > $timeout) {
        drupal_set_message(t('You have tried to use a one-time login link that has expired. Please request a new one using the form below.'));
        drupal_goto('user/password');
      }
      elseif ($account->uid && $timestamp >= $account->login && $timestamp <= $current && $hashed_pass == user_pass_rehash($account->pass, $timestamp, $account->login)) {
        // First stage is a confirmation form, then login
        if ($action == 'login') {
          watchdog('user', 'User %name used one-time login link at time %timestamp.', array('%name' => $account->name, '%timestamp' => $timestamp));
          // Set the new user.
          $user = $account;
          // user_login_finalize() also updates the login timestamp of the
          // user, which invalidates further use of the one-time login link.
          user_login_finalize();
          drupal_set_message(t('You have just used your one-time login link. It is no longer necessary to use this link to log in.'));
          // Let the user's password be changed without the current password check.
          $token = drupal_hash_base64(drupal_random_bytes(55));
          $_SESSION['pass_reset_' . $user->uid] = $token;
          drupal_goto('user');
        }
        else {
          // Login directly without an extra step
          drupal_goto("user/reset/$uid/$timestamp/$hashed_pass/login");
        }
      }
      else {
        drupal_set_message(t('You have tried to use a one-time login link that has either been used or is no longer valid. Please request a new one using the form below.'));
        drupal_goto('user/login');
      }
    }
    else {
      // Deny access, no more clues.
      // Everything will be in the watchdog's URL for the administrator to check.
      drupal_access_denied();
    }
  }
}

function passwordless_register_validate($form, &$form_state) {
  // This immediately changes the password set automatically, for extra security
  $form_state['values']['account']['pass'] = md5(user_password());
}
